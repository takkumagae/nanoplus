"""autogenerated by genmsg_py from Traj.msg. Do not edit."""
import roslib.message
import struct


class Traj(roslib.message.Message):
  _md5sum = "2247a0f85eea2ff3978d67b9faa207e8"
  _type = "opticalflow_msgs/Traj"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 x
float64 y
float64 z
float64 vx
float64 vy
float64 vz
float64 acc_x
float64 acc_y
float64 acc_z
float64 stop
int32 mode
bool use_sensor

"""
  __slots__ = ['x','y','z','vx','vy','vz','acc_x','acc_y','acc_z','stop','mode','use_sensor']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','int32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       x,y,z,vx,vy,vz,acc_x,acc_y,acc_z,stop,mode,use_sensor
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(Traj, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.z is None:
        self.z = 0.
      if self.vx is None:
        self.vx = 0.
      if self.vy is None:
        self.vy = 0.
      if self.vz is None:
        self.vz = 0.
      if self.acc_x is None:
        self.acc_x = 0.
      if self.acc_y is None:
        self.acc_y = 0.
      if self.acc_z is None:
        self.acc_z = 0.
      if self.stop is None:
        self.stop = 0.
      if self.mode is None:
        self.mode = 0
      if self.use_sensor is None:
        self.use_sensor = False
    else:
      self.x = 0.
      self.y = 0.
      self.z = 0.
      self.vx = 0.
      self.vy = 0.
      self.vz = 0.
      self.acc_x = 0.
      self.acc_y = 0.
      self.acc_z = 0.
      self.stop = 0.
      self.mode = 0
      self.use_sensor = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_10diB.pack(_x.x, _x.y, _x.z, _x.vx, _x.vy, _x.vz, _x.acc_x, _x.acc_y, _x.acc_z, _x.stop, _x.mode, _x.use_sensor))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 85
      (_x.x, _x.y, _x.z, _x.vx, _x.vy, _x.vz, _x.acc_x, _x.acc_y, _x.acc_z, _x.stop, _x.mode, _x.use_sensor,) = _struct_10diB.unpack(str[start:end])
      self.use_sensor = bool(self.use_sensor)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_10diB.pack(_x.x, _x.y, _x.z, _x.vx, _x.vy, _x.vz, _x.acc_x, _x.acc_y, _x.acc_z, _x.stop, _x.mode, _x.use_sensor))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 85
      (_x.x, _x.y, _x.z, _x.vx, _x.vy, _x.vz, _x.acc_x, _x.acc_y, _x.acc_z, _x.stop, _x.mode, _x.use_sensor,) = _struct_10diB.unpack(str[start:end])
      self.use_sensor = bool(self.use_sensor)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_10diB = struct.Struct("<10diB")
