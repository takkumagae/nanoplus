"""autogenerated by genmsg_py from StateMsg.msg. Do not edit."""
import roslib.message
import struct


class StateMsg(roslib.message.Message):
  _md5sum = "39ecc4f4366a9d2c85c9ca7bfcf7cd3b"
  _type = "opticalflow_msgs/StateMsg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 x
float64 y
float64 z
float64 vx
float64 vy
float64 vicon_vx
float64 vicon_vy
float64 sensor_vx
float64 sensor_vy
float64 vz
float64 roll
float64 pitch
float64 yaw
float64 des_x
float64 des_y
float64 des_z
float64 des_vx
float64 des_vy
float64 des_vz
float64 des_roll
float64 des_pitch
float64 des_yaw
float64 des_accx
float64 des_accy
float64 des_accz

"""
  __slots__ = ['x','y','z','vx','vy','vicon_vx','vicon_vy','sensor_vx','sensor_vy','vz','roll','pitch','yaw','des_x','des_y','des_z','des_vx','des_vy','des_vz','des_roll','des_pitch','des_yaw','des_accx','des_accy','des_accz']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       x,y,z,vx,vy,vicon_vx,vicon_vy,sensor_vx,sensor_vy,vz,roll,pitch,yaw,des_x,des_y,des_z,des_vx,des_vy,des_vz,des_roll,des_pitch,des_yaw,des_accx,des_accy,des_accz
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(StateMsg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.z is None:
        self.z = 0.
      if self.vx is None:
        self.vx = 0.
      if self.vy is None:
        self.vy = 0.
      if self.vicon_vx is None:
        self.vicon_vx = 0.
      if self.vicon_vy is None:
        self.vicon_vy = 0.
      if self.sensor_vx is None:
        self.sensor_vx = 0.
      if self.sensor_vy is None:
        self.sensor_vy = 0.
      if self.vz is None:
        self.vz = 0.
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.des_x is None:
        self.des_x = 0.
      if self.des_y is None:
        self.des_y = 0.
      if self.des_z is None:
        self.des_z = 0.
      if self.des_vx is None:
        self.des_vx = 0.
      if self.des_vy is None:
        self.des_vy = 0.
      if self.des_vz is None:
        self.des_vz = 0.
      if self.des_roll is None:
        self.des_roll = 0.
      if self.des_pitch is None:
        self.des_pitch = 0.
      if self.des_yaw is None:
        self.des_yaw = 0.
      if self.des_accx is None:
        self.des_accx = 0.
      if self.des_accy is None:
        self.des_accy = 0.
      if self.des_accz is None:
        self.des_accz = 0.
    else:
      self.x = 0.
      self.y = 0.
      self.z = 0.
      self.vx = 0.
      self.vy = 0.
      self.vicon_vx = 0.
      self.vicon_vy = 0.
      self.sensor_vx = 0.
      self.sensor_vy = 0.
      self.vz = 0.
      self.roll = 0.
      self.pitch = 0.
      self.yaw = 0.
      self.des_x = 0.
      self.des_y = 0.
      self.des_z = 0.
      self.des_vx = 0.
      self.des_vy = 0.
      self.des_vz = 0.
      self.des_roll = 0.
      self.des_pitch = 0.
      self.des_yaw = 0.
      self.des_accx = 0.
      self.des_accy = 0.
      self.des_accz = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_25d.pack(_x.x, _x.y, _x.z, _x.vx, _x.vy, _x.vicon_vx, _x.vicon_vy, _x.sensor_vx, _x.sensor_vy, _x.vz, _x.roll, _x.pitch, _x.yaw, _x.des_x, _x.des_y, _x.des_z, _x.des_vx, _x.des_vy, _x.des_vz, _x.des_roll, _x.des_pitch, _x.des_yaw, _x.des_accx, _x.des_accy, _x.des_accz))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 200
      (_x.x, _x.y, _x.z, _x.vx, _x.vy, _x.vicon_vx, _x.vicon_vy, _x.sensor_vx, _x.sensor_vy, _x.vz, _x.roll, _x.pitch, _x.yaw, _x.des_x, _x.des_y, _x.des_z, _x.des_vx, _x.des_vy, _x.des_vz, _x.des_roll, _x.des_pitch, _x.des_yaw, _x.des_accx, _x.des_accy, _x.des_accz,) = _struct_25d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_25d.pack(_x.x, _x.y, _x.z, _x.vx, _x.vy, _x.vicon_vx, _x.vicon_vy, _x.sensor_vx, _x.sensor_vy, _x.vz, _x.roll, _x.pitch, _x.yaw, _x.des_x, _x.des_y, _x.des_z, _x.des_vx, _x.des_vy, _x.des_vz, _x.des_roll, _x.des_pitch, _x.des_yaw, _x.des_accx, _x.des_accy, _x.des_accz))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 200
      (_x.x, _x.y, _x.z, _x.vx, _x.vy, _x.vicon_vx, _x.vicon_vy, _x.sensor_vx, _x.sensor_vy, _x.vz, _x.roll, _x.pitch, _x.yaw, _x.des_x, _x.des_y, _x.des_z, _x.des_vx, _x.des_vy, _x.des_vz, _x.des_roll, _x.des_pitch, _x.des_yaw, _x.des_accx, _x.des_accy, _x.des_accz,) = _struct_25d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_25d = struct.Struct("<25d")
